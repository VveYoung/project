<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.sixlens.project-webank</groupId>
    <artifactId>project-webank</artifactId>
    <version>1.0-SNAPSHOT</version>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>

        <!-- mysql数据库驱动连接 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.16</version>
        </dependency>

        <!-- 阿里druid连接池依赖 -->
        <!--        <dependency>-->
        <!--            <groupId>com.alibaba</groupId>-->
        <!--            <artifactId>druid</artifactId>-->
        <!--            <version>1.2.18</version>-->
        <!--        </dependency>-->

        <!-- dbcp连接池依赖 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.9.0</version>
        </dependency>

        <!-- bcprov-jdk15on 加密算法工具，使用SM4算法，对文件进行加密、解密 -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>1.54</version>
        </dependency>

        <!-- Apache Commons Compress: 提供文件压缩功能 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.21</version>
        </dependency>

        <!-- Apache Commons VFS: 提供文件操作和传输的统一接口  -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-vfs2</artifactId>
            <version>2.8.0</version>
        </dependency>

        <!-- JSch for SFTP：提供SSH和SFTP功能 -->
        <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <version>0.1.55</version>
        </dependency>

        <!-- JavaMail API: 提供邮件发送功能 -->
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>javax.mail-api</artifactId>
            <version>1.6.2</version>
        </dependency>

        <!-- JavaMail 实现: JavaMail API 的实现 -->
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <version>1.6.2</version>
        </dependency>

        <!-- logback基础 提供日志记录接口 -->
        <!--        <dependency>-->
        <!--            <groupId>ch.qos.logback</groupId>-->
        <!--            <artifactId>logback-core</artifactId>-->
        <!--            <version>1.2.11</version>-->
        <!--        </dependency>-->

        <!-- logback-classic 包含了 logback-core 和 slf4j-api 依赖 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.11</version>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.8.0</version>
        </dependency>

        <!-- Project Lombok: 提供注解简化Java代码 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.20</version>
            <scope>provided</scope>
        </dependency>


        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.9.3</version>
        </dependency>


        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.79</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

    </dependencies>


    <build>
        <plugins>
            <!-- 方便打成jar包，直接执行命令： java -jar xxx.jar 即可启动jar包 -->
            <!-- 配置了一个Maven插件，即maven-assembly-plugin。该插件的版本号为3.3.0，它的作用是将项目打包成一个可执行的JAR文件，
                    并将所有依赖项打包到JAR文件中。-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>com.sixlens.project.webank.app.WebankDataExportApp</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- 方便打成有依赖的jar包，亦可直接执行命令： java -jar xxx-jar-with-dependencies.jar 即可启动jar包 -->
            <!-- 用于将项目打包为包含依赖的 JAR 文件的插件 -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.3.0</version> <!-- 选择适当的版本 -->
                <configuration>
                    <!-- 输出的 JAR 文件的主类名字 -->
                    <archive>
                        <manifest>
                            <!-- 指定主类，用于执行 JAR 文件 -->
                            <mainClass>com.sixlens.project.webank.app.WebankDataExportApp</mainClass>
                        </manifest>
                    </archive>
                    <!-- 指定使用哪个打包策略 -->
                    <descriptorRefs>
                        <!-- 使用预定义的 JAR 文件描述符 -->
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>

                <!-- 指定插件的执行方式 -->
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <!-- 绑定到 Maven 生命周期的阶段 -->
                        <phase>package</phase>
                        <!-- 表示只执行一次 -->
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
